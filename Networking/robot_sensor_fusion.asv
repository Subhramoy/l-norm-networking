clc; close all; clear all;


%Controller based path correction
% Define a set of waypoints for the desired path for the robot

path  = [-24.5 -25; -20 -25; -14.5 -25; -14.5 -20.5; -14.5 -15.5; -14.5 -10; -14.5 -5; -14.5 -0.5; -14.5 5; 

-14.5 10; -14.5 15; -14.5 20; -14.5 25.5; -10 25.5; -4.5 25.5; 0 25.5; 5.5 25.5; 5.5 20; 5.5 15; 5.5 10; 5.5 5; 

5.5 0; 5.5 -5; 5.5 -10; 5.5 -15; 5.5 -20; 5.5 -25.5; 10 -25.5; 15 -25.5; 20 -25.5; 20 -25.5; 25.5 -25.5; 25.5 -20; 

25.5 -15; 25.5 -10; 25.5 -5; 25.5 0; 25.5 5; 25.5 10; 25.5 15; 25.5 20; 25.5 25];

% Set the current location and the goal location of the robot as defined by the path
robotInitialLocation = path(1,:);
robotGoal = path(end,:);

% Assume an initial robot orientation 
% (the robot orientation is the angle between the robot heading and the positive X-axis, measured counterclockwise)
initialOrientation = 0;

% Define the current pose for the robot [x y theta]
robotCurrentPose = [robotInitialLocation initialOrientation]';

% Initialize the robot model and assign an initial pose 
% The simulated robot has kinematic equations for the motion of a two-wheeled differential drive robot
% The inputs to this simulated robot are linear and angular velocities
robot = differentialDriveKinematics("TrackWidth", 1, "VehicleInputs", "VehicleSpeedHeadingRate");

% Based on the path defined above and a robot motion model, you need a path following controller to drive the robot along the path. 
% Create the path following controller using the controllerPurePursuit object.
controller = controllerPurePursuit;

% Use the path defined above to set the desired waypoints for the controller
controller.Waypoints = path;

% Set the path following controller parameters. 
% The desired linear velocity is set to 0.6 meters/second for this example.
controller.DesiredLinearVelocity = 0.8;

% The maximum angular velocity acts as a saturation limit for rotational velocity. 
% This is set at 2 radians/second for this example.
controller.MaxAngularVelocity = 2;

% The lookahead distance should be larger than the desired linear velocity for a smooth path.
% The robot might cut corners when the lookahead distance is large.
% A small lookahead distance can result in an unstable path following behavior.
controller.LookaheadDistance = 0.4;

% The path following controller provides input control signals for the robot. 
% The robot uses to drive itself along the desired path.
% Too small value of the goal radius may cause the robot to miss the goal, which may result in an unexpected behavior near the goal.
goalRadius = 0.1;
distanceToGoal = norm(robotInitialLocation - robotGoal);

% Initialize the simulation loop
sampleTime = 0.1;
vizRate = rateControl(1/sampleTime);

% Initialize the figure
figure

% Determine vehicle frame size to most closely represent vehicle with plotTransforms
frameSize = robot.TrackWidth/0.3;



% Sensor fusion integration


% To simulate this configuration, the IMU (accelerometer and gyroscope) is
% sampled at 100 Hz, and the GPS is sampled at 10 Hz.

imuFs = 10;
gpsFs = 10;

% Define where on the Earth this simulation takes place using latitude, 
% longitude, and altitude (LLA) coordinates.
localOrigin = [42.2825 -71.343 53.0352];

% Validate that the |gpsFs| divides |imuFs|. This allows the sensor sample
% rates to be simulated using a nested for loop without complex sample rate
% matching.

% imuSamplesPerGPS = (imuFs/gpsFs);
% assert(imuSamplesPerGPS == fix(imuSamplesPerGPS), ...
%     'GPS sampling rate must be an integer factor of IMU sampling rate.');

gndFusion = insfilterNonholonomic('ReferenceFrame', 'ENU', ...
    'IMUSampleRate', imuFs, ...
    'ReferenceLocation', localOrigin, ...
    'DecimationFactor', 2);

% Trajectory parameters
path_x  = [-24.5; -20; -14.5; -14.5; -14.5; -14.5; -14.5; -14.5; -14.5; 

-14.5; -14.5; -14.5; -14.5; -10; -4.5; 0; 5.5; 5.5; 5.5; 5.5; 5.5; 

5.5; 5.5; 5.5; 5.5; 5.5; 5.5; 10; 15; 20; 20; 25.5; 25.5; 

25.5; 25.5; 25.5; 25.5; 25.5; 25.5; 25.5; 25.5; 25.5];

path_y  = [-25; -25; -25; -20.5; -15.5; -10; -5; -0.5; 5; 

10; 15; 20; 25.5; 25.5; 25.5; 25.5; 25.5; 20; 15; 10; 5; 

0; -5; -10; -15; -20; -25.5; -25.5; -25.5; -25.5; -25.5; -25.5; -20; 

-15; -10; -5; 0; 5; 10; 15; 20; 25];

path_z = zeros(size(path_x));
position = [path_x, path_y, path_z];
%Added speed for debugging
speed = 0.8;

for i=1:length(path_x)
    if i==length(path_x)
        break;
    end
    dist(i) = sqrt(((path_x(i+1)- path_x(i))^2)+(path_y(i+1)- path_y(i))^2); 
end
distance_traversed = sum(dist);
%added rev time for debugging
revTime = distance_traversed / speed;

time_of_arrival = linspace(0, revTime, numel(path_x)).';
t = time_of_arrival;

theta = zeros(size(path_x));
initialYaw = 0; % (degrees)
for i=1:length(path_x)
%     yaw_temp(i) = 0;
% end
    if path_y(i) == -25 && path_x(i) >= -24.5 && path_x(i) <= -14.5
        yaw_temp(i) = 0;
    else 
        if path_x(i) == -14.5 && path_y(i) >= -20.5 && path_y(i) <= 25.5
            yaw_temp(i) = 90;
        else
            if path_x(i) >= -10 && path_x(i) <= 5.5 && path_y(i) == 25.5
                yaw_temp(i) = 0;
            else
                if path_x(i) == 5.5 && path_y(i) <=20 && path_y(i) >= -25.5
                    yaw_temp(i) = -90;
                else
                    if path_x(i) >= 10 && path_x(i) <= 25.5 && path_y(i) == -25.5
                       yaw_temp(i) = 0; 
                    else
                        if path_x(i) == 25.5 && path_y(i) >= -20 && path_y(i) <= 25
                            yaw_temp(i) = 90; 
                        end
                    end
                end
            end
        end
    end
end
% yaw_temp(4) = -90;
% yaw_temp(14) = 90;
% yaw_temp(18) = -90;
% yaw_temp(28) = 90;
% yaw_temp(33) = -90;


% Define orientation.
yaw=yaw_temp.';
yaw = deg2rad(yaw);
yaw = mod(yaw, 2*pi);
pitch = zeros(size(yaw));
roll = zeros(size(yaw));
orientation = quaternion([yaw, pitch, roll], 'euler', ...
    'ZYX', 'frame');

% Generate trajectory.
groundTruth = waypointTrajectory('SampleRate', imuFs, ...
    'Waypoints', position, ...
    'TimeOfArrival', t, ...
    'Orientation', orientation);

% Initialize the random number generator used to simulate sensor noise.
rng('default');

%% GPS Receiver
% Set up the GPS at the specified sample rate and reference location. The
% other parameters control the nature of the noise in the output signal.

gps = gpsSensor('UpdateRate', gpsFs, 'ReferenceFrame', 'ENU');
gps.ReferenceLocation = localOrigin;  % 3-element row vector in geodetic coordinates (latitude, longitude, and altitude) [degrees degrees meters]
gps.DecayFactor = 0.5;                % [0,1] 0 models the global position noise as a white noise process. 1 models the global position noise as a random walk process. 
gps.HorizontalPositionAccuracy = 1.0; % standard deviation of the noise in the horizontal position measurement  
gps.VerticalPositionAccuracy =  1.0;  % standard deviation of the noise in the vertical position measurement
gps.VelocityAccuracy = 0.1;           % standard deviation of the noise in the velocity measurement

%% IMU Sensors

imu = imuSensor('accel-gyro', ...
    'ReferenceFrame', 'ENU', 'SampleRate', imuFs);

% Accelerometer
imu.Accelerometer.MeasurementRange =  19.6133; % Max measurable accleration in m/s^2
imu.Accelerometer.Resolution = 0.0023928;      % Resolution of sensor measurements in (m/s^2)/LSB
imu.Accelerometer.NoiseDensity = 0.0012356;    % Power spectral density of sensor noise in (m/s^2/âˆšHz)

% Gyroscope
imu.Gyroscope.MeasurementRange = deg2rad(250);
imu.Gyroscope.Resolution = deg2rad(0.0625);
imu.Gyroscope.NoiseDensity = deg2rad(0.025);

%% Initialize the States of the |insfilterNonholonomic|
% The states are:
% 
%  States                            Units    Index
%  Orientation (quaternion parts)             1:4  
%  Gyroscope Bias (XYZ)              rad/s    5:7  
%  Position (NED)                    m        8:10 
%  Velocity (NED)                    m/s      11:13
%  Accelerometer Bias (XYZ)          m/s^2    14:16
%
% Ground truth is used to help initialize the filter states, so the filter
% converges to good answers quickly.

% Get the initial ground truth pose from the first sample of the trajectory
% and release the ground truth trajectory to ensure the first sample is not 
% skipped during simulation.
[initialPos, initialAtt, initialVel] = groundTruth();
reset(groundTruth);

% Initialize the states of the filter
gndFusion.State(1:4) = compact(initialAtt).';
gndFusion.State(5:7) = imu.Gyroscope.ConstantBias;
gndFusion.State(8:10) = initialPos.';
gndFusion.State(11:13) = initialVel.';
gndFusion.State(14:16) = imu.Accelerometer.ConstantBias;

%% Initialize the Variances of the |insfilterNonholonomic|
% The measurement noises describe how much noise is corrupting the GPS 
% reading based on the |gpsSensor| parameters and how much uncertainty is 
% in the vehicle dynamic model.

% Measurement noises
Rvel = gps.VelocityAccuracy.^2;
Rpos = gps.HorizontalPositionAccuracy.^2;

% The dynamic model of the ground vehicle for this filter assumes there is
% no side slip or skid during movement. This means that the velocity is 
% constrained to only the forward body axis. The other two velocity axis 
% readings are corrected with a zero measurement weighted by the 
% |ZeroVelocityConstraintNoise| parameter.
gndFusion.ZeroVelocityConstraintNoise = 1e-2;

% Process noises
gndFusion.GyroscopeNoise = 4e-6;
gndFusion.GyroscopeBiasNoise = 4e-14;
gndFusion.AccelerometerNoise = 4.8e-2;
gndFusion.AccelerometerBiasNoise = 4e-14;

% Initial error covariance
gndFusion.StateCovariance = 1e-9*ones(16);


%% Initialize Scopes
% The |HelperScrollingPlotter| scope enables plotting of variables over
% time. It is used here to track errors in pose. The |HelperPoseViewer|
% scope allows 3-D visualization of the filter estimate and ground truth
% pose. The scopes can slow the simulation. To disable a scope, set the
% corresponding logical variable to |false|.

% useErrScope = true; % Turn on the streaming error plot
% usePoseView = true;  % Turn on the 3D pose viewer
% 
% if useErrScope
%     errscope = HelperScrollingPlotter( ...
%             'NumInputs', 4, ...
%             'TimeSpan', 10, ...
%             'SampleRate', imuFs, ...
%             'YLabel', {'degrees', ...
%             'meters', ...
%             'meters', ...
%             'meters'}, ...
%             'Title', {'Quaternion Distance', ...
%             'Position X Error', ...
%             'Position Y Error', ...
%             'Position Z Error'}, ...
%             'YLimits', ...
%             [-1, 1
%              -1, 1
%              -1, 1
%              -1, 1]);
% end
% 
% if usePoseView
%     viewer = HelperPoseViewer( ...
%         'XPositionLimits', [-15, 15], ...
%         'YPositionLimits', [-15, 15], ...
%         'ZPositionLimits', [-5, 5], ...
%         'ReferenceFrame', 'ENU');
% end


%% Simulation Loop
% The main simulation loop is a while loop with a nested for loop. The
% while loop executes at the |gpsFs|, which is the GPS measurement rate.
% The nested for loop executes at the |imuFs|, which is the IMU sample
% rate. The scopes are updated at the IMU sample rate.

totalSimTime = 100; % seconds

% Log data for final metric computation.
numsamples = floor(min(t(end), totalSimTime) * gpsFs);
truePosition = zeros(numsamples,3);
trueOrientation = quaternion.zeros(numsamples,1);
estPosition = zeros(numsamples,3);
estOrientation = quaternion.zeros(numsamples,1);

idx = 0;

while( distanceToGoal > goalRadius )
    [v, omega] = controller(robotCurrentPose);
                
     % Get the robot's velocity using controller inputs
     vel = derivative(robot, robotCurrentPose, [v omega]);
    
     % Update the current pose
     robotCurrentPose = robotCurrentPose + vel*sampleTime; 
                
     % Re-compute the distance to the goal
     distanceToGoal = norm(robotCurrentPose(1:2) - robotGoal(:));
% for sampleIdx = 1:numsamples
%         awgnNoise = randi([-5,40],1,1);
        % Predict loop at IMU update frequency.
%         for i = 1:imuSamplesPerGPS
%             if ~isDone(groundTruth)
                idx = idx + 1;

                % Simulate the IMU data from the current pose.
                [truePosition, trueOrientation, ...
                    trueVel, trueAcc, trueAngVel] = groundTruth();
                [accelData, gyroData] = imu(trueAcc, trueAngVel, ...
                    trueOrientation);

                % Include AWGN to accelData and gyroData
                %accelData = awgn(accelData,awgnNoise,'measured');
                %gyroData = awgn(gyroData,awgnNoise,'measured');

                % Use the predict method to estimate the filter state based
                % on the accelData and gyroData arrays.
                predict(gndFusion, accelData, gyroData);

                % Log the estimated orientation and position.
                [estPosition, estOrientation] = pose(gndFusion);
                
                estPosition = estPosition.'; 
                disp("estPosition")
                disp(estPosition)

                eul_angle = max(quat2eul(estOrientation));
                
                if eul_angle == 0
                     eul_angle = -max(abs(quat2eul(estOrientation)));
                end
                
%                 if estPosition(1) > 3 && estPosition(1) < 7 && estPosition(2) > -25.5 && estPosition(2) < 25
%                     eul_angle = -1.5708;
%                 end

%                 if eul_angle < 0
%                     eul_angle = -1.5708;
%                 end
                
                disp("eul_angle")
                disp(eul_angle)
%                 if eul_angle == -2.4158e-04
%                     eul_angle = -1.5711;
%                 end
                
%         if ~isDone(groundTruth)
            % This next step happens at the GPS sample rate.
            % Simulate the GPS output based on the current pose.
            [lla, gpsVel] = gps(truePosition, trueVel);
%             lla = awgn(lla,awgnNoise,'measured');
            %gpsVel = awgn(gpsVel,awgnNoise,'measured');
    
            % Update the filter states based on the GPS data.
            fusegps(gndFusion, lla, Rpos, gpsVel, Rvel);
%         end

%                 robotCurrentPose_sensor(idx,:) = [estPosition(idx,1:2) eul_angle(idx)];

                % Compute the errors and plot.
    %             if useErrScope
    %                 orientErr = rad2deg( ...
    %                     dist(estOrientation(idx,:), trueOrientation(idx,:)));
    %                 posErr = estPosition(idx,:) - truePosition(idx,:);
    %                 errscope(orientErr, posErr(1), posErr(2), posErr(3));
    %             end
    % 
    %             % Update the pose viewer.
    %             if usePoseView
    %                 viewer(estPosition(idx,:), estOrientation(idx,:), ...
    %                     truePosition(idx,:), estOrientation(idx,:));
    %             end
    
    
        % Update the plot
    hold off
    
    % Plot path each instance so that it stays persistent while robot mesh moves
    
    plot(path(:,1), path(:,2),"k--d")
    hold all
    
    % Plot the path of the robot as a set of transforms
    plotTrVec = [robotCurrentPose(1:2); 0];
    plotRot = axang2quat([0 0 1 robotCurrentPose(3)]);
    plotTransforms(plotTrVec', plotRot, "MeshFilePath", "groundvehicle.stl", "Parent", gca, "View","2D", "FrameSize", frameSize);
    light;
    xlim([-30 30])
    ylim([-30 30])
    grid on
    plotTrVec1 = [estPosition(1:2); 0];
    plotRot1 = axang2quat([0 0 1 eul_angle]);
    plotTransforms(plotTrVec1', plotRot1, "MeshFilePath", "groundvehicle.stl", "Parent", gca, "View","2D", "FrameSize", frameSize);

    
    waitfor(vizRate);
end


% end

%% Error Metric Computation
% Position and orientation were logged throughout the simulation. Now 
% compute an end-to-end root mean squared error for both position and 
% orientation.

posd = estPosition - truePosition;

% min_x = min(min(groundTruth.Waypoints(:,1)),min(estPosition(:,1)));
% max_x = max(max(groundTruth.Waypoints(:,1)),max(estPosition(:,1)));
% min_y = min(min(groundTruth.Waypoints(:,2)),min(estPosition(:,2)));
% max_y = max(max(groundTruth.Waypoints(:,2)),max(estPosition(:,2)));
% 
% figure()
% hold on
% grid on
% xlim([-30 30]);
% ylim([-30 30]);
% plot(groundTruth.Waypoints(:,1),groundTruth.Waypoints(:,2))
% plot(estPosition(:,1),estPosition(:,2))
% plot(estPosition(1,1),estPosition(1,2), 'b*')
% hold off


